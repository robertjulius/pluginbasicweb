package com.ganesha.plugin.basicweb.wizards;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.InvocationTargetException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.SubProgressMonitor;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.actions.WorkspaceModifyOperation;
import org.eclipse.ui.dialogs.WizardNewProjectCreationPage;

import com.ganesha.plugin.GeneralConstants;

/**
 * This is a sample new wizard. Its role is to create a new file resource in the
 * provided container. If the container resource (a folder or a project) is
 * selected in the workspace when the wizard is opened, it will accept it as the
 * target container. The wizard creates one file with the extension "xml". If a
 * sample multi-page editor (also available as a template) is registered for the
 * same extension, it will be able to open it.
 */

public class BasicWebProjectWizard extends Wizard implements INewWizard {

	private WizardNewProjectCreationPage wizardPage;
	private IProject project;

	/**
	 * Constructor
	 */
	public BasicWebProjectWizard() {
		super();
	}

	/**
	 * Adding the page to the wizard.
	 */
	@Override
	public void addPages() {
		wizardPage = new WizardNewProjectCreationPage(
				GeneralConstants.WIZARD_PAGE);
		wizardPage.setDescription(GeneralConstants.WIZARD_DESCRIPTION);
		wizardPage.setTitle(GeneralConstants.WIZARD_TITLE);
		addPage(wizardPage);

	}

	@Override
	public void init(IWorkbench arg0, IStructuredSelection arg1) {
		/*
		 * Do Nothing
		 */
	}

	/**
	 * This method is called when 'Finish' button is pressed in the wizard. We
	 * will create an operation and run it using wizard as execution context.
	 */
	@Override
	public boolean performFinish() {

		if (project != null) {
			return true;
		}

		final IProject projectHandle = wizardPage.getProjectHandle();

		URI projectURI = !wizardPage.useDefaults() ? wizardPage
				.getLocationURI() : null;

		IWorkspace workspace = ResourcesPlugin.getWorkspace();

		final IProjectDescription desc = workspace
				.newProjectDescription(projectHandle.getName());

		desc.setLocationURI(projectURI);

		WorkspaceModifyOperation op = new WorkspaceModifyOperation() {
			@Override
			protected void execute(IProgressMonitor monitor)
					throws CoreException {
				createProject(desc, projectHandle, monitor);
			}
		};

		/*
		 * TODO This isn't as robust as the code in the
		 * BasicNewProjectResourceWizard class. Consider beefing this up to
		 * improve error handling.
		 */
		try {
			getContainer().run(true, true, op);
		} catch (InterruptedException e) {
			return false;
		} catch (InvocationTargetException e) {
			Throwable realException = e.getTargetException();
			MessageDialog.openError(getShell(), "Error",
					realException.getMessage());
			return false;
		}

		project = projectHandle;

		if (project == null) {
			return false;
		}

		return true;

	}

	private void createFile(IContainer container, Path path,
			InputStream contentStream, IProgressMonitor monitor)
			throws CoreException {

		IFile file = container.getFile(path);
		if (file.exists()) {
			file.setContents(contentStream, true, true, monitor);
		} else {
			file.create(contentStream, true, monitor);
		}
	}

	private void createFile(IProject project, File tempateDir, File file,
			IProgressMonitor monitor) throws CoreException {

		InputStream contentStream = null;
		try {
			String path = null;

			StringBuilder sb = new StringBuilder();
			for (File tempFile = file.getParentFile(); !tempateDir
					.equals(tempFile); tempFile = tempFile.getParentFile()) {
				sb.insert(0, IPath.SEPARATOR + tempFile.getName());
			}
			path = sb.toString();

			if (!path.isEmpty()
					&& path.indexOf(IPath.SEPARATOR) == path.length() - 1) {
				path = path.substring(0, path.length() - 1);
			}

			for (int i = path.indexOf(IPath.SEPARATOR); i >= 0
					&& i < path.length() - 1; i = path.indexOf(IPath.SEPARATOR,
					i + 1)) {

				String tempPath = null;
				if (path.indexOf(IPath.SEPARATOR, i + 1) < 0) {
					tempPath = path;
				} else {
					tempPath = path.substring(0,
							path.indexOf(IPath.SEPARATOR, i + 1));
				}

				IFolder folder = project.getFolder(new Path(tempPath));
				if (!folder.exists()) {
					folder.create(true, true, monitor);
				}
			}

			contentStream = openContentStream(
					GeneralConstants.TEMPLATES_PATH + IPath.SEPARATOR + path
							+ IPath.SEPARATOR + file.getName(),
					project.getName());

			createFile(project,
					new Path(path + IPath.SEPARATOR + file.getName()),
					contentStream, monitor);

		} finally {
			try {
				if (contentStream != null) {
					contentStream.close();
				}
			} catch (IOException e) {
				IStatus status = new Status(IStatus.ERROR, this.getClass()
						.getName(), IStatus.OK, e.getLocalizedMessage(), null);
				throw new CoreException(status);
			}
		}
	}

	private void createProject(IProjectDescription description,
			IProject project, IProgressMonitor monitor) throws CoreException,
			OperationCanceledException {
		try {

			monitor.beginTask("Creating Ganesha Basic Web...", 2000);

			project.create(description, new SubProgressMonitor(monitor, 1000));

			if (monitor.isCanceled()) {
				throw new OperationCanceledException();
			}

			project.open(IResource.BACKGROUND_REFRESH, new SubProgressMonitor(
					monitor, 1000));

			URL url = this.getClass().getResource(
					GeneralConstants.TEMPLATES_PATH);
			File templateDir = new File(FileLocator.resolve(url).toURI());

			scanFilesRecursively(project, templateDir, templateDir, monitor);

		} catch (URISyntaxException e) {
			IStatus status = new Status(IStatus.ERROR, this.getClass()
					.getName(), IStatus.OK, e.getLocalizedMessage(), null);
			throw new CoreException(status);
		} catch (IOException e) {
			IStatus status = new Status(IStatus.ERROR, this.getClass()
					.getName(), IStatus.OK, e.getLocalizedMessage(), null);
			throw new CoreException(status);
		} finally {
			monitor.done();
		}

	}

	/**
	 * We will initialize file contents with a sample text.
	 * 
	 * @throws CoreException
	 */
	private InputStream openContentStream(String filePath, String projectName)
			throws CoreException {

		String newLine = System.getProperty("line.separator");
		StringBuilder sb = new StringBuilder();

		InputStream input = null;
		BufferedReader reader = null;

		try {
			input = this.getClass().getResourceAsStream(filePath);
			reader = new BufferedReader(new InputStreamReader(input));

			String line;
			while ((line = reader.readLine()) != null) {
				line = line.replaceAll(
						"\\" + GeneralConstants.PROJECT_NAME_VAR, projectName);
				sb.append(line);
				sb.append(newLine);
			}

		} catch (IOException e) {
			IStatus status = new Status(IStatus.ERROR, this.getClass()
					.getName(), IStatus.OK, e.getLocalizedMessage(), null);
			throw new CoreException(status);
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					IStatus status = new Status(IStatus.ERROR, this.getClass()
							.getName(), IStatus.OK, e.getLocalizedMessage(),
							null);
					throw new CoreException(status);
				}
			}
		}

		return new ByteArrayInputStream(sb.toString().getBytes());

	}

	private void scanFilesRecursively(IProject project, File tempateDir,
			File file, IProgressMonitor monitor) throws CoreException {

		File[] childs = file.listFiles();
		if (childs != null && childs.length > 0) {
			for (File child : childs) {
				scanFilesRecursively(project, tempateDir, child, monitor);
			}
		} else {
			if (file.isFile()) {
				monitor.setTaskName("Creating file " + file.getName());
				createFile(project, tempateDir, file, monitor);
			} else {
				/*
				 * TODO
				 */
			}
		}
	}
}